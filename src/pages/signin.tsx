import { GetServerSideProps } from "next";
import Head from "next/head";
import Image from "next/image";
import Logo from "public/logo.png";
import { authOptions } from "./api/auth/[...nextauth]";
import { config } from "@/config";
import { getServerSession } from "next-auth";
import { locales } from "@/locales";
import { routes } from "@/routes";
import { useConnectModal } from "@rainbow-me/rainbowkit";
import { useLogin } from "@/hooks/useLogin";
import { withHydratationFix } from "@/hoc/withHydratationFix";

const SigninPage: React.FC = () => {
  const { openConnectModal } = useConnectModal();
  const { loading, error } = useLogin();

  return (
    <>
      <Head>
        <title>{`${locales.signIn} | ${config.APP_NAME}`}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div>
        <div className="flex min-h-full flex-col justify-center py-12 sm:px-6 lg:px-8">
          <div className="flex flex-col items-center mt-6 space-y-6">
            <Image src={Logo} alt="Logo" className="w-12 rounded-full" />
            <div className="sm:mx-auto sm:w-full sm:max-w-md">
              <h2 className=" text-center text-3xl font-bold tracking-tight text-gray-900">
                {locales.signinToYourAccount}
              </h2>
            </div>
          </div>

          <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
            <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
              <div>
                {(openConnectModal || loading) && (
                  <button
                    onClick={openConnectModal}
                    type="submit"
                    className="flex w-full justify-center rounded-md border border-transparent bg-theme-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-theme-700 focus:outline-none focus:ring-2 focus:ring-theme-500 focus:ring-offset-2"
                  >
                    {loading ? locales.connecting : locales.signInWithWallet}
                  </button>
                )}
                {error ? (
                  <p className="text-red-500 mt-4 text-center">{error}</p>
                ) : null}
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default withHydratationFix(SigninPage);

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);
  if (session) {
    return {
      redirect: {
        destination: routes.profile,
        permanent: false,
      },
    };
  }

  return {
    props: { session },
  };
};
